// noinspection JSUnusedGlobalSymbols

import { ITimeWindowItem, ITimeWindowSetStatOptions, TimeWindow } from '../base/TimeWindow';
import { echoSimple } from '../../utils/echo-simple';
import { MILLIS_IN_HOUR, MIN_WINDOW_MILLIS } from '../../constants';
import { Debug } from '../../utils/debug';
import { lBlue, m } from '../../utils/color';
import { toUTC } from '../../utils/date-utils';
import { VirtualTimeObj } from '../../VirtualTimeObj';
import { getTimeParamFromMillis } from '../../utils/utils';

const debug = Debug('KeyedTimeWindow');

export interface IKeyedTimeWindowOptions<T, S = any> {
  /**
   * –û—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–º—è –æ–∫–Ω–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  winName: string,
  /**
   * –®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞, –º—Å
   */
  widthMillis: number,
  /**
   * –û–∫–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ "–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ" –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ –≤–∞–∂–Ω–æ –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
   * –•–æ—Ç—è —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤ –æ–∫–Ω–µ, –≤ —Ñ—É–Ω–∫—Ü–∏–∏ this.removeExpired()
   */
  virtualTimeObj?: VirtualTimeObj,
  /**
   * –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ—á–∏—Å—Ç–∫–∏ –æ–∫–Ω–∞ –æ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–±—ã—Ç–∏–π.
   * –ï—Å–ª–∏ 0, —Ç–æ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
   * –ï—Å–ª–∏ undefined, —Ç–æ –æ—á–∏—Å—Ç–∫–∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è (—ç—Ç–∏–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã—à–µ—Å—Ç–æ—è—â–∏–π –æ–±—ä–µ–∫—Ç)
   */
  removeExpiredIntervalMillis?: number,
  /**
   * –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ö–µ—à–∞ –ø—É—Å—Ç—ã—Ö –æ–∫–æ–Ω
   */
  removeEmptyIntervalMillis?: number,
  /**
   * –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª—é—á–µ–≤–∞–Ω–Ω—ã—Ö –æ–∫–æ–Ω.
   */
  initStat?: (_timeWindow: TimeWindow<T, S>) => void,
  /**
   * –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏(—É–¥–∞–ª–µ–Ω–∏–∏) —Å–æ–±—ã—Ç–∏–π –≤ –∫–ª—é—á–µ–≤–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ.
   * –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞, —Ç–æ –ø–æ–¥–º–µ–Ω–∏—Ç —Å–æ–±–æ–π –º–µ—Ç–æ–¥ NumberWindow.setStat()
   */
  setStat?: (_setStatOptions: ITimeWindowSetStatOptions<T, S>) => void,
  /**
   * –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –û–Ω–∞ –ø–æ–¥–º–µ–Ω–∏—Ç –º–µ—Ç–æ–¥ –æ–∫–Ω–∞ NumberWindow.getStat()
   * –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, —Ç–æ –º–µ—Ç–æ–¥ this.getStatByKey() –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ –æ–∫–Ω–∞ NumberWindow.stat
   */
  getStat?: (_timeWindow: TimeWindow<T, S>) => any,
}

export interface IKeyedTimeWindowHash<T, S = any> {
  [key: string | number]: TimeWindow<T, S>
}

export interface IKeyedTimeWindowInfo {
  numberOfItemsInWindow: number,
  perHour: number,
  firstTs: number,
  lastTs: number,

  [fieldName: string]: any
}

/**
 * –ù–∞–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω (TimeWindow), –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–∞–º–∏.
 * –®–∏—Ä–∏–Ω–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω –∑–∞–¥–∞–µ—Ç—Å—è –µ–¥–∏–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º this.widthMillis –≤ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–≤–∞–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞.
 * (–≤–ø—Ä–æ—á–µ–º —ç—Ç–æ –Ω–µ –∑–∞–ø—Ä–µ—â–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ –≤–∑—è—Ç–æ–≥–æ –æ–∫–Ω–∞ –≤ —Ä–µ–∞–ª—Ç–∞–π–º–µ)
 *
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω –≤ —Ä–∞–∑—Ä–µ–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–ª—é—á - guid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
 * –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –µ–≥–æ —Å–¥–µ–ª–æ–∫ (–∏ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –Ω–∏–º) –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏.
 */
export class KeyedTimeWindow<T, S = any> {
  public hash: IKeyedTimeWindowHash<T, S> = {};

  public widthMillis: number;

  _removeExpiredTimer: any;

  _collectGarbageTimer: any;

  constructor (public options: IKeyedTimeWindowOptions<T, S>) {
    this.widthMillis = options.widthMillis;
    this.setRemoveExpiredEventsTimer(options.removeExpiredIntervalMillis);
  }

  setRemoveExpiredEventsTimer (removeExpiredIntervalMillis: number | undefined) {
    const { virtualTimeObj, removeEmptyIntervalMillis } = this.options;
    const self = this;
    // –ï—Å–ª–∏ options.removeExpiredIntervalMillis –±–æ–ª—å—à–µ 0, —Ç–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–∫–æ–Ω –æ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–±—ã—Ç–∏–π
    // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ this.removeExpired(), –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø–æ —Ç–∞–π–º–µ—Ä—É.
    // –≠—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ, –∫–æ–≥–¥–∞ –º—ã —Ö–æ—Ç–∏–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –≤ –æ–∫–Ω–∞—Ö –Ω–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–±—ã—Ç–∏–π –±–æ–ª–µ–µ, —á–µ–º –Ω–∞ removeExpiredIntervalMillis.
    // –î–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ –æ–∫–Ω–∞ –æ—á–∏—â–∞—é—Ç—Å—è –ø–æ –º–µ—Ä–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π. –ò –≤–æ–∑–º–æ–∂–µ–Ω —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –≤ –æ–∫–Ω–µ –∑–∞—Å—Ç—Ä—è–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ–±—ã—Ç–∏–π,
    // –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π (–∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–∏—Ö –æ—á–∏—Å—Ç–∫—É) –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–æ.
    const isUseRemoveExpiredHere = virtualTimeObj && (removeExpiredIntervalMillis || 0) > 0;

    if (isUseRemoveExpiredHere) {
      clearInterval(this._removeExpiredTimer);
      this._removeExpiredTimer = setInterval(() => {
        const st = Date.now();
        const removedCount = self.removeExpired(virtualTimeObj.virtualTs);
        if (debug.enabled && removedCount) {
          echoSimple(`${m}–£–¥–∞–ª–µ–Ω–æ ${lBlue}${removedCount}${m} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ –æ–∫–æ–Ω [KeyedTimeWindow] winName: ${lBlue
          }${this.options.winName}${m} üïí ${Date.now() - st} ms`);
        }
      }, removeExpiredIntervalMillis || 10_000);
    } else {
      clearInterval(this._collectGarbageTimer);
      this._collectGarbageTimer = setInterval(() => {
        this.collectGarbage();
      }, removeEmptyIntervalMillis || 30_000);
    }
  }

  add (key: string | number, ts: number, data: T) {
    const { hash, widthMillis } = this;
    const item: ITimeWindowItem<T> = { ts, data };
    let timeWindow = hash[key];
    if (!timeWindow) {
      hash[key] = new TimeWindow<T, S>({
        winName: `${this.options.winName}/TW`,
        key,
        widthMillis,
        getStat: this.options.getStat,
        setStat: this.options.setStat,
        virtualTimeObj: this.options.virtualTimeObj,
        initStat: this.options.initStat,
      });
      timeWindow = hash[key];
    }
    timeWindow.add(item);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Ö–µ—à–∞ –≤—Å–µ –æ–∫–Ω–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π
   */
  collectGarbage () {
    Object.entries(this.hash).forEach(([key, timeWindow]) => {
      if (!timeWindow.win.length) {
        timeWindow.destroy();
        delete this.hash[key];
      }
    });
  }

  removeExpired (virtualTs: number): number {
    const { hash } = this;
    const removed: ITimeWindowItem<T>[] = [];
    Object.entries(hash).forEach(([key, timeWindow]) => {
      removed.push(...timeWindow.removeExpired(virtualTs));
      if (!timeWindow.win.length) {
        delete hash[key];
      }
    });

    if (debug.enabled && removed.length) {
      const winWidth = getTimeParamFromMillis(this.widthMillis, 'biggest');
      echoSimple(`${m}–£–¥–∞–ª–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ —Å–æ–±—ã—Ç–∏—è (${lBlue}${removed.length}${m} —à—Ç) –∏–∑ –æ–∫–Ω–∞ [KeyedTimeWindow] winName: ${lBlue
      }${this.options.winName}${m} (width: ${winWidth})`);
      const inputTimes = removed.map(({ ts }) => ts);
      const minInputTs = Math.min(...inputTimes);
      const maxInputTs = Math.max(...inputTimes);
      const minInterval = getTimeParamFromMillis(virtualTs - minInputTs, 'biggest');
      echoSimple(`${m}\t min ts: ${lBlue}${toUTC(minInputTs)}${m} / max ts: ${lBlue}${toUTC(maxInputTs)}${m
      } /  vt: ${lBlue}${toUTC(virtualTs)}${m} / period: ${lBlue}${minInterval}${m}`);
    }
    removed.forEach((timeWindowItem) => {
      timeWindowItem.data = undefined;
      // @ts-ignore
      timeWindowItem.ts = undefined;
    });
    return removed.length;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –ø–æ –∫–ª—é—á—É.
   */
  getWindowByKey (key: string | number): TimeWindow<T, S> | undefined {
    return this.hash[key];
  }

  getStatByKey (key: string | number): any {
    const timeWindow = this.getWindowByKey(key);
    return timeWindow?.getStat(timeWindow);
  }

  getCount (key: string | number): number {
    return this.hash[key]?.win.length || 0;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–µ–¥–µ–Ω–∏—è –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞.
   * –ù—É–∂–Ω–æ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–ª—Å—è –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ –≤ –æ–∫–Ω–æ,
   * –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑ –æ–∫–Ω–∞ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã "–ø—Ä–æ—Ç—É—Ö—à–∏–µ" —Å—É—â–Ω–æ—Å—Ç–∏
   */
  getInfo (key: string | number, customDataCallback?: Function): IKeyedTimeWindowInfo {
    const timeWindow = this.hash[key] || { win: [], lastTs: 0 };
    const win = timeWindow.win || [];
    const numberOfItemsInWindow = win.length;
    const result = {
      numberOfItemsInWindow,
      perHour: Math.ceil((numberOfItemsInWindow * MILLIS_IN_HOUR) / this.widthMillis),
      firstTs: numberOfItemsInWindow ? win[0].ts : 0,
      lastTs: numberOfItemsInWindow ? timeWindow.lastTs : 0,
    };
    if (customDataCallback) {
      customDataCallback(result, win);
    }
    return result;
  }

  setCountWindowWidth (widthMillis: number) {
    if (widthMillis < MIN_WINDOW_MILLIS || widthMillis === this.widthMillis) {
      return;
    }
    this.widthMillis = widthMillis;
    Object.values(this.hash).forEach((hashItem) => {
      hashItem.setWidth(widthMillis);
    });
  }

  destroy () {
    clearInterval(this._removeExpiredTimer);
    this._removeExpiredTimer = undefined;
    clearInterval(this._collectGarbageTimer);
    this._collectGarbageTimer = undefined;
    // @ts-ignore
    this.hash = undefined;
  }
}
